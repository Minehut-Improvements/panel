<!DOCTYPE html>
<html>
<head>
    <title>Server Panel</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.5/axios.min.js"></script>
    <style>
        .container { max-width: 1000px; margin: 0 auto; padding: 20px; }
        .card { border: 1px solid #ddd; padding: 20px; margin: 10px 0; border-radius: 4px; }
        .status { font-size: 1.2em; margin: 10px 0; }
        button { padding: 8px 16px; cursor: pointer; margin: 0 5px; }
        .online { color: green; }
        .offline { color: red; }
        .fade { transition: all 0.3s ease; }
        .highlight { background-color: #f0f8ff; }
        .console { 
            background: black;
            color: #00ff00;
            font-family: monospace;
            height: 400px;
            overflow-y: scroll;
            padding: 10px;
            margin: 10px 0;
        }
        .console-input {
            width: 100%;
            padding: 8px;
            margin: 10px 0;
            background: #1a1a1a;
            color: white;
            border: 1px solid #333;
        }
        .control-panel {
            display: flex;
            gap: 10px;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Server: <span id="server-name"></span></h1>
        <div id="server-info" class="card fade"></div>

        <div class="control-panel">
            <button onclick="startServer()">Start</button>
            <button onclick="bootServer()">Un-Hibernate</button>
            <button onclick="stopServer()">Stop</button>
            <button onclick="restartServer()">Restart</button>
        </div>

        <div class="card">
            <h3>Console</h3>
            <div id="console" class="console"></div>
            <input type="text" id="console-input" class="console-input" placeholder="Enter command..."
                   onkeypress="if(event.key === 'Enter') sendCommand(this.value)">
        </div>

        <div class="card">
            <h3>MOTD Editor</h3>
            <textarea id="motd-input" style="width: 100%; height: 100px;"></textarea>
            <button onclick="updateMOTD()">Update MOTD</button>
        </div>

        <button onclick="window.location.href='/'">Back to Server List</button>
    </div>

    <script>
        const serverId = window.location.pathname.split('/').pop();
        let lastData = null;
        let updateInterval;
        let ws;
        let isConnected = false; // Flag to track connection state
        let keepAliveInterval;
        
        function initWebSocket() {
            const token = getCookie('token');
            const profileId = getCookie('profile_id');
            const sessionId = getCookie('sessionId');
        
            ws = new WebSocket(`wss://${window.location.host}/proxy/server/${serverId}/console`);
        
            ws.onmessage = (event) => {
                let data = JSON.parse(event.data);
                const consoleDiv = document.getElementById('console');
        
                if (data.type === 'connected') {
                    isConnected = true;
        
                    // Start the keepalive loop
                    if (keepAliveInterval) clearInterval(keepAliveInterval);
                    keepAliveInterval = setInterval(() => {
                        if (isConnected) {
                            ws.send(JSON.stringify({
                                type: 'keepalive'
                            }));
                        }
                    }, 15000);
        
                    ws.send(JSON.stringify({
                        type: 'console:getscrollback'
                    }));
                } else if (data.type === 'console:scrollback') {
                    consoleDiv.innerHTML = '';
                    data.data.forEach(data => {
                        if (data.type === 'console:std') {
                            appendConsoleMessage(data);
                        } else if (data.type === 'console:cmdran') {
                            appendConsoleMessage(data, true);
                        }
                    });
                } else if (data.type === 'console:std') {
                    appendConsoleMessage(data);
                } else if (data.type === 'console:cmdran') {
                    appendConsoleMessage(data, true);
                }
            };
        
            ws.onclose = () => {
                isConnected = false; // Reset the connection flag
                if (keepAliveInterval) clearInterval(keepAliveInterval); // Stop the keepalive loop
            };
        }
        
        function appendConsoleMessage(msg, isCmdran = false) {
            const consoleDiv = document.getElementById('console');
            const msgDiv = document.createElement('div');
            if (isCmdran) {
                msgDiv.textContent = '> ' + msg.data.msg;
            } else {
                msgDiv.textContent = msg.data.msg;
            }
            consoleDiv.appendChild(msgDiv);
            consoleDiv.scrollTop = consoleDiv.scrollHeight;
        }
        
        function sendCommand(command) {
            if (!command || !isConnected) {
                console.log('Command not sent. WebSocket not connected or command is empty.');
                return;
            }
            ws.send(JSON.stringify({
                type: 'console:cmd',
                data: { command }
            }));
            document.getElementById('console-input').value = '';
        }

        async function startServer() {
            try {
                await axios.post(`/proxy/server/${serverId}/start`);
                await updateServerInfo();
            } catch (error) {
                alert('Failed to start server');
            }
        }
        async function bootServer() {
            try {
                await axios.post(`/proxy/server/${serverId}/start_service`);
                await updateServerInfo();
            } catch (error) {
                alert('Failed to boot server');
            }
        }

        async function stopServer() {
            try {
                await axios.post(`/proxy/server/${serverId}/shutdown`);
                await updateServerInfo();
            } catch (error) {
                alert('Failed to stop server');
            }
        }

        async function restartServer() {
            try {
                await axios.post(`/proxy/server/${serverId}/restart`);
                await updateServerInfo();
            } catch (error) {
                alert('Failed to restart server');
            }
        }

        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
        }

        function updateDOM(server) {
            document.getElementById('server-name').textContent = server.name;
            
            const infoCard = document.getElementById('server-info');
            const newHtml = `
                <div class="status ${server.online ? 'online' : 'offline'}">
                    Status: ${server.online ? 'Online' : 'Offline'}
                </div>
                <div>Players: ${server.player_count}/${server.max_players}</div>
                <div>RAM: ${(server.max_ram / 1024).toFixed(1)} GB</div>
                <div>Version: ${server.server_version?.version || 'Unknown'}</div>
            `;

            if (lastData && (
                server.online !== lastData.online ||
                server.player_count !== lastData.player_count
            )) {
                infoCard.classList.add('highlight');
                setTimeout(() => infoCard.classList.remove('highlight'), 1000);
            }

            infoCard.innerHTML = newHtml;
            
            const motdInput = document.getElementById('motd-input');
            if (!motdInput.matches(':focus')) {
                motdInput.value = server.motd || '';
            }
        }

        async function updateServerInfo() {
            try {
                const response = await axios.get('/getData');
                const server = response.data.find(s => s._id === serverId);
                if (!server) return alert('Server not found');
                
                updateDOM(server);
                lastData = { ...server };
            } catch (error) {
                console.error('Failed to fetch server data:', error);
            }
        }

        async function updateMOTD() {
            const motd = document.getElementById('motd-input').value;
            try {
                await axios.post(`/proxy/server/${serverId}/change_motd`, { motd });
                await updateServerInfo();
            } catch (error) {
                alert('Failed to update MOTD');
            }
        }

        initWebSocket();
        updateServerInfo();
        updateInterval = setInterval(updateServerInfo, 3000);
        window.onbeforeunload = () => {
            clearInterval(updateInterval);
            ws.close();
        };
    </script>
</body>
</html>
