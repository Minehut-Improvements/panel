<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Server Panel</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.22.20/babel.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.development.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.development.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.5/axios.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f8fb;
            color: #333;
            margin: 0;
            padding: 0;
        }

        h1, h3 {
            color: #0056b3;
        }

        .container {
            max-width: 1200px;
            margin: 20px auto;
            padding: 20px;
            background: #ffffff;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }

        .card {
            border: 1px solid #e0e0e0;
            padding: 20px;
            margin: 10px 0;
            border-radius: 8px;
            background-color: #ffffff;
            box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.05);
        }

        .status {
            font-size: 1.2em;
            margin: 10px 0;
            font-weight: bold;
        }

        .online {
            color: #28a745;
        }

        .offline {
            color: #dc3545;
        }

        button {
            padding: 10px 20px;
            cursor: pointer;
            margin: 5px;
            border: none;
            border-radius: 4px;
            background-color: #007bff;
            color: white;
            font-size: 1em;
            transition: background-color 0.2s ease;
        }

        button:hover {
            background-color: #0056b3;
        }

        .console {
            background: #001f3f;
            color: #00ff00;
            font-family: monospace;
            height: 400px;
            overflow-y: scroll;
            padding: 15px;
            margin: 10px 0;
            border-radius: 8px;
            border: 1px solid #004080;
        }

        .console-input {
            width: 100%;
            padding: 12px;
            margin: 10px 0;
            background: #004080;
            color: white;
            border: 1px solid #003366;
            border-radius: 4px;
        }

        .control-panel {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin: 10px 0;
        }

        textarea {
            width: 100%;
            height: 100px;
            padding: 10px;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            resize: none;
            font-family: Arial, sans-serif;
            font-size: 1em;
        }

        select, input[type="text"], input[type="number"], input[type="checkbox"] {
            font-family: Arial, sans-serif;
            font-size: 1em;
            padding: 8px;
            margin: 5px 0;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            width: 100%;
            box-sizing: border-box;
        }

        label {
            display: block;
            font-weight: bold;
            margin: 5px 0;
        }

        .mb-4 {
            margin-bottom: 16px;
        }

        .text-xl {
            font-size: 1.5em;
        }

        .font-bold {
            font-weight: bold;
        }

        .p-2 {
            padding: 8px;
        }

        .rounded {
            border-radius: 4px;
        }

        .grid {
            display: grid;
            gap: 16px;
        }

        .grid-cols-2 {
            grid-template-columns: 1fr 1fr;
        }

        .hover\:bg-blue-600:hover {
            background-color: #0056b3;
        }

        .mt-4 {
            margin-top: 16px;
        }

        .text-white {
            color: white;
        }

        .bg-blue-500 {
            background-color: #007bff;
        }
    </style>
</head>

<body>
    <div class="container">
        <h1>Server: <span id="server-name"></span></h1>
        <div id="server-info" class="card fade"></div>

        <div class="control-panel">
            <button onclick="startServer()">Start</button>
            <button onclick="stopServer()">Stop</button>
            <button onclick="restartServer()">Restart</button>
            <button onclick="upgradeServer()">Max out server</button>
            <button onclick="hibernateServer()">Hibernate</button>
            <button onclick="bootServer()">Un-Hibernate</button>
        </div>

        <div class="card">
            <h3>Console</h3>
            <div id="console" class="console"></div>
            <input type="text" id="console-input" class="console-input" placeholder="Enter command..."
                   onkeypress="if(event.key === 'Enter') sendCommand(this.value)">
        </div>

        <div class="card">
            <h3>MOTD Editor</h3>
            <textarea id="motd-input" style="width: 100%; height: 100px;"></textarea>
            <button onclick="updateMOTD()">Update MOTD</button>
        </div>

        <div class="card">
            <div id="server-properties-root"></div>
        </div>

        <div class="card">
            <h3>Custom Ports</h3>
            <div id="port-management-root"></div>
        </div>

        <button onclick="window.location.href='/'">Back to Server List</button>
    </div>

    <script>
        const serverId = window.location.pathname.split('/').pop();

        function toggleNewPortMenu() {
            const menu = document.getElementById('new-port-menu');
            menu.style.display = menu.style.display === 'none' ? 'block' : 'none';
        }

        function addPort() {
            const portInput = document.getElementById('new-port-input');
            const portValue = parseInt(portInput.value, 10);
            const portList = document.getElementById('port-list');

            if (portList.children.length >= MAX_PORTS) {
                alert('Maximum of ' + MAX_PORTS + ' ports reached.');
                return;
            }

            if (portValue && portValue >= 1024 && portValue <= 65535) {
                const newPortItem = document.createElement('div');
                newPortItem.className = 'port-item';
                newPortItem.innerHTML = `Port ${portValue} <button onclick="deletePort(${portValue})">Delete</button>`;
                portList.appendChild(newPortItem);
                portInput.value = '';
                toggleNewPortMenu();
            } else {
                alert('Please enter a valid port number (1024-65535).');
            }
        }

        async function fetchPorts() {
            try {
                const response = await axios.get(`/proxy/v1/server/${serverId}/port`);
                return response.data;
            } catch (error) {
                console.error('Failed to fetch ports:', error);
                return [];
            }
        }

        async function createPort() {
            try {
                const portInput = document.getElementById('new-port-input');
                const in_port = parseInt(portInput.value, 10);
                let type = 'TCP';
                const response = await axios.post(`/proxy/v1/server/${serverId}/port`, { serverId, type, in_port });
                alert('Port created successfully: ' + response.data.port);
                window.location.reload();
            } catch (error) {
                alert('Failed to create port');
                console.error(error);
            }
        }

        async function deletePort(portId) {
            try {
                await axios.delete(`/proxy/v1/server/${serverId}/port/${portId}`);
                alert('Port deleted successfully');
                window.location.reload();
            } catch (error) {
                alert('Failed to delete port');
                console.error(error);
            }
        }

        async function loadPorts() {
            const ports = await fetchPorts();
            const root = document.getElementById('port-management-root');
            root.innerHTML = '';
            let numports = 0;
        
            if (ports && ports.length > 0) {
                ports.forEach(port => {
                    numports += 1;
                    const portDiv = document.createElement('div');
                    portDiv.className = 'port';
                    portDiv.textContent = `Internal Port: ${port.in_port}, External Port: ${port.ex_port}, IP: ${port.ip.ip}`;
        
                    const deleteButton = document.createElement('button');
                    deleteButton.textContent = 'Delete';
                    deleteButton.onclick = () => deletePort(port.id);
        
                    portDiv.appendChild(deleteButton);
                    root.appendChild(portDiv);
                });
            }
        
            if (numports < 2) {
                const newportInput = document.createElement('input');
                newportInput.type = 'number';
                newportInput.id = 'new-port-input';
                newportInput.placeholder = 'Enter port number';
                newportInput.min = 1024;
                newportInput.max = 65535;
        
                const addPortButton = document.createElement('button');
                addPortButton.textContent = 'Add Port';
                addPortButton.onclick = () => {
                    const portValue = parseInt(newportInput.value, 10);
                    if (!isNaN(portValue)) createPort(portValue);
                };
        
                root.appendChild(newportInput);
                root.appendChild(addPortButton);
            }
        }

        loadPorts();

        let lastData = null;
        let updateInterval;
        let ws;
        let isConnected = false; // Flag to track connection state
        let keepAliveInterval;
        
        function initWebSocket() {
            const token = getCookie('token');
            const profileId = getCookie('profile_id');
            const sessionId = getCookie('sessionId');
        
            ws = new WebSocket(`wss://${window.location.host}/proxy/server/${serverId}/console`);
        
            ws.onmessage = (event) => {
                let data = JSON.parse(event.data);
                const consoleDiv = document.getElementById('console');
        
                if (data.type === 'connected') {
                    isConnected = true;
        
                    // Start the keepalive loop
                    if (keepAliveInterval) clearInterval(keepAliveInterval);
                    keepAliveInterval = setInterval(() => {
                        if (isConnected) {
                            ws.send(JSON.stringify({
                                type: 'keepalive'
                            }));
                        }
                    }, 15000);
        
                    ws.send(JSON.stringify({
                        type: 'console:getscrollback'
                    }));
                } else if (data.type === 'console:scrollback') {
                    consoleDiv.innerHTML = '';
                    data.data.forEach(data => {
                        if (data.type === 'console:std') {
                            appendConsoleMessage(data);
                        } else if (data.type === 'console:cmdran') {
                            appendConsoleMessage(data, true);
                        }
                    });
                } else if (data.type === 'console:std') {
                    appendConsoleMessage(data);
                } else if (data.type === 'console:cmdran') {
                    appendConsoleMessage(data, true);
                }
            };
        
            ws.onclose = () => {
                if (isConnected) {
                    window.location.reload();
                    isConnected = false; // Reset the connection flag
                }
                if (keepAliveInterval) clearInterval(keepAliveInterval); // Stop the keepalive loop
            };
        }
        
        function appendConsoleMessage(msg, isCmdran = false) {
            const consoleDiv = document.getElementById('console');
            const msgDiv = document.createElement('div');
            if (isCmdran) {
                msgDiv.textContent = '> ' + msg.data.msg;
            } else {
                msgDiv.textContent = msg.data.msg;
            }
            consoleDiv.appendChild(msgDiv);
            consoleDiv.scrollTop = consoleDiv.scrollHeight;
        }
        
        function sendCommand(command) {
            if (!command || !isConnected) {
                console.log('Command not sent. WebSocket not connected or command is empty.');
                return;
            }
            ws.send(JSON.stringify({
                type: 'console:cmd',
                data: { command }
            }));
            document.getElementById('console-input').value = '';
        }

        async function startServer() {
            try {
                await axios.post(`/proxy/server/${serverId}/start`);
                await updateServerInfo();
            } catch (error) {
                alert('Failed to start server');
            }
        }
        async function bootServer() {
            try {
                await axios.post(`/proxy/server/${serverId}/start_service`);
                await updateServerInfo();
            } catch (error) {
                alert('Failed to boot server');
            }
        }

        async function stopServer() {
            try {
                await axios.post(`/proxy/server/${serverId}/shutdown`);
                await updateServerInfo();
            } catch (error) {
                alert('Failed to stop server');
            }
        }

        async function restartServer() {
            try {
                await axios.post(`/proxy/server/${serverId}/restart`);
                await updateServerInfo();
            } catch (error) {
                alert('Failed to restart server');
            }
        }

        async function hibernateServer() {
            try {
                await axios.post(`/proxy/server/${serverId}/destroy_service`);
                await updateServerInfo();
            } catch (error) {
                alert('Failed to restart server');
            }
        }

        async function upgradeServer() {
            try {
                const payload = {
                    ram: "gb32",
                    max_players: "default",
                    online_status: "always_online",
                    disk_space: "default",
                    cpu: "pro",
                    backups: "standard",
                    cost: 0,
                };
        
                await axios.post(`/proxy/v1/server/${serverId}/custom_plan`, payload);
                await updateServerInfo();
            } catch (error) {
                alert('Failed to upgrade server');
                console.log(error);
            }
        }

        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
        }

        function updateDOM(server) {
            document.getElementById('server-name').textContent = server.name;
            
            const infoCard = document.getElementById('server-info');
            const newHtml = `
                <div class="status ${server.online ? 'online' : 'offline'}">
                    Status: ${server.online ? 'Online' : 'Offline'}
                </div>
                <div>Players: ${server.player_count}/${server.max_players}</div>
                <div>RAM: ${(server.max_ram / 1024).toFixed(1)} GB</div>
                <div>Version: ${server.server_version?.version || 'Unknown'}</div>
            `;

            if (lastData && (
                server.online !== lastData.online ||
                server.player_count !== lastData.player_count
            )) {
                infoCard.classList.add('highlight');
                setTimeout(() => infoCard.classList.remove('highlight'), 1000);
            }

            infoCard.innerHTML = newHtml;
            
            const motdInput = document.getElementById('motd-input');
            if (!motdInput.matches(':focus')) {
                motdInput.value = server.motd || '';
            }
        }

        async function updateServerInfo() {
            try {
                const response = await axios.get('/getData');
                const server = response.data.find(s => s._id === serverId);
                if (!server) return alert('Server not found');
                
                updateDOM(server);
                lastData = { ...server };
            } catch (error) {
                console.error('Failed to fetch server data:', error);
            }
        }

        async function updateMOTD() {
            const motd = document.getElementById('motd-input').value;
            try {
                await axios.post(`/proxy/server/${serverId}/change_motd`, { motd });
                await updateServerInfo();
            } catch (error) {
                alert('Failed to update MOTD');
            }
        }

        initWebSocket();
        updateServerInfo();
        updateInterval = setInterval(updateServerInfo, 3000);
        window.onbeforeunload = () => {
            clearInterval(updateInterval);
            ws.close();
        };
    </script>

<script type="text/babel">
    const { useState, useEffect } = React;

    function ServerPropertiesEditor() {
        const [editMode, setEditMode] = useState('edit');
        const [properties, setProperties] = useState({});
        const [loading, setLoading] = useState(true);

        useEffect(() => {
            const fetchProperties = async () => {
                const serverId = window.location.pathname.split('/').pop();
                try {
                    const response = await axios.get(`/proxy/file/${serverId}/read/server.properties`);
                    const content = response.data.content;
                    const parsedProperties = content
                        .split('\n')
                        .filter(line => line && !line.startsWith('#'))
                        .reduce((acc, line) => {
                            const [key, value] = line.split('=').map(part => part.trim());
                            acc[key] = isNaN(value) 
                                ? value === 'true' ? true : value === 'false' ? false : value
                                : Number(value);
                            return acc;
                        }, {});
                    setProperties(parsedProperties);
                } catch (error) {
                    console.error('Failed to fetch server properties', error);
                } finally {
                    setLoading(false);
                }
            };

            fetchProperties();
        }, []);

        const handleSubmit = async (e) => {
            e.preventDefault();
            const serverId = window.location.pathname.split('/').pop();
            const endpoint = editMode === 'edit' 
                ? `/proxy/server/${serverId}/edit_server_properties`
                : `/proxy/server/${serverId}/patch_server_properties`;
            
            try {
                await axios({
                    method: editMode === 'edit' ? 'POST' : 'PATCH',
                    url: endpoint,
                    data: { serverProperties: properties }
                });
                restartServer();
                alert('Server properties updated successfully');
            } catch (error) {
                alert('Failed to update server properties');
                console.error(error);
            }
        };

        const handleChange = (name, value) => {
            setProperties(prev => ({
                ...prev,
                [name]: value
            }));
        };

        const renderField = (name, type = 'text') => {
            const label = name.split('-').map(word => 
                word.charAt(0).toUpperCase() + word.slice(1)
            ).join(' ');

            if (type === 'boolean') {
                return (
                    <div key={name} className="mb-4">
                        <label className="block">
                            <input
                                type="checkbox"
                                checked={properties[name]}
                                onChange={e => handleChange(name, e.target.checked)}
                                className="mr-2"
                            />
                            {label}
                        </label>
                    </div>
                );
            }

            return (
                <div key={name} className="mb-4">
                    <label className="block mb-2">{label}</label>
                    {type === 'select' ? (
                        <select
                            value={properties[name]}
                            onChange={e => handleChange(name, e.target.value)}
                            className="w-full p-2 border rounded"
                        >
                            {name === 'gamemode' && ['survival', 'creative', 'adventure', 'spectator'].map(mode => (
                                <option key={mode} value={mode}>{mode}</option>
                            ))}
                            {name === 'difficulty' && ['peaceful', 'easy', 'normal', 'hard'].map(diff => (
                                <option key={diff} value={diff}>{diff}</option>
                            ))}
                        </select>
                    ) : (
                        <input
                            type={type}
                            value={properties[name]}
                            onChange={e => handleChange(name, type === 'number' ? Number(e.target.value) : e.target.value)}
                            className="w-full p-2 border rounded"
                        />
                    )}
                </div>
            );
        };

        const fields = editMode === 'edit' ? [
            { name: 'max-players', type: 'number' },
            { name: 'view-distance', type: 'number' },
            { name: 'gamemode', type: 'select' },
            { name: 'difficulty', type: 'select' },
            { name: 'spawn-monsters', type: 'boolean' },
            { name: 'spawn-animals', type: 'boolean' },
            { name: 'force-gamemode', type: 'boolean' },
            { name: 'level-type', type: 'text' },
            { name: 'spawn-npcs', type: 'boolean' },
            { name: 'allow-nether', type: 'boolean' },
            { name: 'pvp', type: 'boolean' },
            { name: 'allow-flight', type: 'boolean' },
            { name: 'spawn-protection', type: 'number' },
            { name: 'announce-player-achievements', type: 'boolean' },
            { name: 'enable-command-block', type: 'boolean' },
            { name: 'require-resource-pack', type: 'boolean' },
            { name: 'hardcore', type: 'boolean' },
            { name: 'level-name', type: 'text' },
            { name: 'max-tick-time', type: 'number' },
            { name: 'resource-pack-prompt', type: 'text' },
            { name: 'op-permission-level', type: 'number' },
            { name: 'entity-broadcast-range-percentage', type: 'number' },
            { name: 'white-list', type: 'boolean' },
            { name: 'snooper-enabled', type: 'boolean' },
            { name: 'enforce-whitelist', type: 'boolean' }
        ] : [
            { name: 'max-players', type: 'number' },
            { name: 'pvp', type: 'boolean' },
            { name: 'enable-command-block', type: 'boolean' },
            { name: 'allow-nether', type: 'boolean' },
            { name: 'white-list', type: 'boolean' },
            { name: 'enforce-whitelist', type: 'boolean' },
            { name: 'player-idle-timeout', type: 'number' },
            { name: 'allow-flight', type: 'boolean' },
            { name: 'spawn-protection', type: 'number' },
            { name: 'view-distance', type: 'number' },
            { name: 'simulation-distance', type: 'number' },
            { name: 'entity-broadcast-range-percentage', type: 'number' },
            { name: 'broadcast-console-to-ops', type: 'boolean' },
            { name: 'op-permission-level', type: 'number' },
            { name: 'function-permission-level', type: 'number' }
        ];

        if (loading) {
            return <div>Loading server properties...</div>;
        }

        return (
            <div className="mt-4 p-4 border rounded">
                <h2 className="text-xl font-bold mb-4">Server Properties</h2>
                <div className="mb-4">
                    <select
                        value={editMode}
                        onChange={(e) => setEditMode(e.target.value)}
                        className="p-2 border rounded"
                    >
                        <option value="edit">Full Edit Mode</option>
                        <option value="patch">Limited Patch Mode</option>
                    </select>
                </div>

                <form onSubmit={handleSubmit}>
                    <div className="grid grid-cols-2 gap-4">
                        {fields.map(field => renderField(field.name, field.type))}
                    </div>
                    <button type="submit" className="mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
                        Save Properties
                    </button>
                </form>
            </div>
        );
    };

    const root = ReactDOM.createRoot(document.getElementById('server-properties-root'));
    root.render(React.createElement(ServerPropertiesEditor));
</script>
</body>
</html>
