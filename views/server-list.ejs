<!DOCTYPE html>
<html class="h-full">
<head>
    <title>Server Dashboard</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.5/axios.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            background: linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.6)), url('https://api.oddbyte.dev/img/BrightMoon.jpg');
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
        }
        .fade {
            transition: all 0.3s ease;
        }
        .highlight {
            background: rgba(56, 189, 248, 0.1);
        }
    </style>
</head>
<body class="h-full flex flex-col items-center justify-center p-8 text-white">
    <div class="w-full max-w-4xl space-y-8">
        <div class="flex flex-col text-center items-center justify-center space-y-4">
            <h1 class="text-4xl font-bold">Server Dashboard</h1>
            <p class="text-gray-300">Welcome to the Server Dashboard. Control and monitor your servers here.</p>
            <div class="flex space-x-8">
                <button onclick="showCreateServerPopup()" class="flex items-center justify-center gap-2 px-4 py-2 rounded-lg font-medium transition-all duration-200 transform hover:scale-105 active:scale-95 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 bg-gradient-to-r from-blue-600 to-blue-500 hover:from-blue-500 hover:to-blue-400 text-white">
                    <span>Create Server</span>
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                    </svg>
                </button>
                <button onclick="updateServerList()" class="px-4 py-2 rounded-lg font-medium transition-all duration-200 transform hover:scale-105 active:scale-95 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 bg-gradient-to-r from-blue-600 to-blue-500 hover:from-blue-500 hover:to-blue-400 text-white">
                    Refresh
                </button>
            </div>
        </div>

        <div id="errorMessage" class="hidden p-8 rounded-xl text-center space-y-4 bg-[rgba(17,25,40,0.75)] backdrop-blur-sm border border-[rgba(255,255,255,0.125)]">
            <h2 class="text-2xl font-bold">Oops, there's an error</h2>
            <p>There was an error: <span class="text-red-400" id="errorText"></span></p>
        </div>

        <div class="rounded-xl overflow-hidden bg-[rgba(17,25,40,0.75)] backdrop-blur-sm border border-[rgba(255,255,255,0.125)]">
            <table class="w-full text-left">
                <thead class="bg-gray-800 bg-opacity-50">
                    <tr>
                        <th class="px-6 py-4 font-medium text-gray-300">Name</th>
                        <th class="px-6 py-4 font-medium text-gray-300">Status</th>
                        <th class="px-6 py-4 font-medium text-gray-300">Players</th>
                        <th class="px-6 py-4 font-medium text-gray-300">Open</th>
                    </tr>
                </thead>
                <tbody id="serverList"></tbody>
            </table>
        </div>
    </div>

    <script>
        let lastData = {};
        let updateInterval;

        function createServerRow(server) {
            let statusText = '';
            let statusClass = '';
        
            if (server.suspended) {
                statusText = 'Suspended';
                statusClass = 'text-red-400 font-semibold';
            } else {
                switch (server.status) {
                    case 'SERVICE_OFFLINE':
                        statusText = 'Hibernating';
                        statusClass = 'text-red-400 font-semibold';
                        break;
                    case 'OFFLINE':
                        statusText = 'Offline';
                        statusClass = 'text-red-400 font-semibold';
                        break;
                    case 'STARTING':
                        statusText = 'Starting';
                        statusClass = 'text-green-400 font-semibold';
                        break;
                    case 'ONLINE':
                        statusText = 'Online';
                        statusClass = 'text-green-400 font-semibold';
                        break;
                    case 'STOPPING':
                        statusText = 'Stopping';
                        statusClass = 'text-red-400 font-semibold';
                        break;
                    default:
                        statusText = 'Unknown';
                        statusClass = 'text-red-400 font-semibold';
                        break;
                }
            }
        
            return `
                <tr class="table-row fade" id="server-${server._id}">
                    <td class="px-6 py-4">${server.name}</td>
                    <td class="px-6 py-4 ${statusClass}">${statusText}</td>
                    <td class="px-6 py-4">${server.player_count}/${server.max_players}</td>
                    <td class="px-6 py-4">
                        <button class="flex items-center justify-center gap-2 px-4 py-2 rounded-lg font-medium transition-all duration-200 transform hover:scale-105 active:scale-95 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 bg-gradient-to-r from-blue-600 to-blue-500 hover:from-blue-500 hover:to-blue-400 text-white" onclick="openServer('${server._id}')">Open</button>
                    </td>
                </tr>
            `;
        }

        function highlightChanges(server, oldServer) {
            const row = document.getElementById(`server-${server._id}`);
            if (!row) return;

            if (oldServer) {
                if (server.online !== oldServer.online || 
                    server.player_count !== oldServer.player_count) {
                    row.classList.add('highlight');
                    setTimeout(() => row.classList.remove('highlight'), 1000);
                }
            }
        }

        async function updateServerList(setLoading = true) {
            try {
                const tbody = document.getElementById('serverList');
                if (setLoading) tbody.innerHTML = '<h2 class="px-6 py-4 font-medium text-gray-300">Loading...</h2>';
                const response = await axios.get('/getData');
                const servers = response.data;
                
                let html = '';
                servers.forEach(server => {
                    html += createServerRow(server);
                    highlightChanges(server, lastData[server._id]);
                    lastData[server._id] = { ...server };
                });
                
                tbody.innerHTML = html;
            } catch (error) {
                console.error('Failed to fetch servers:', error);
            }
        }

        function openServer(id) {
            window.open(`https://api.oddbyte.dev/server/${id}`, '_blank');
        }

        function showCreateServerPopup() {
            document.getElementById('overlay').style.display = 'block';
            document.getElementById('createServerPopup').style.display = 'block';
        }

        function closeCreateServerPopup() {
            document.getElementById('overlay').style.display = 'none';
            document.getElementById('createServerPopup').style.display = 'none';
            document.getElementById('serverName').value = '';
        }

        async function createServer() {
            const name = document.getElementById('serverName').value.trim();
            if (!name) {
                alert('Please enter a valid server name.');
                return;
            }

            try {
                const response = await axios.post('/proxy/servers/create', {
                    platform: 'java',
                    name: name,
                    type: 'PAPER',
                    version: '66ba7dc16b14b54cfc0e4edc'
                });

                if (response.status === 200) {
                    location.reload();
                } else {
                    console.error('Failed to create server:', response);
                }
            } catch (error) {
                console.error('Error creating server:', error);
            } finally {
                closeCreateServerPopup();
            }
        }

        updateServerList();
        updateInterval = setInterval(updateServerList(false), 3000);

        window.onbeforeunload = () => clearInterval(updateInterval);
    </script>
</body>
</html>