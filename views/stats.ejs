<div class="max-w-4xl mx-auto">
    <div class="flex justify-between mb-4">
        <h1 class="text-2xl font-bold">Server Metrics</h1>
        <label class="flex items-center">
            <input type="checkbox" id="advanced-mode" class="mr-2">
            Advanced Mode
        </label>
    </div>

    <div class="grid grid-cols-3 gap-4">
        <div class="rounded-lg shadow p-6 text-center">
            <h3 class="text-xl font-bold mb-2">CPU Usage</h3>
            <div id="cpu-percent" class="text-2xl mb-2">0%</div>
            <br />
            <div id="cpu-details" class="text-sm text-gray-600 hidden"></div>
        </div>
        <div class="rounded-lg shadow p-6 text-center">
            <h3 class="text-xl font-bold mb-2">Memory Usage</h3>
            <div id="memory-percent" class="text-2xl mb-2">0%</div>
            <div id="memory-number" class="text-2xl text-gray-500"></div>
            <br />
            <div id="memory-details" class="text-sm text-gray-600 hidden"></div>
        </div>
        <div class="rounded-lg shadow p-6 text-center">
            <h3 class="text-xl font-bold mb-2">Disk Usage</h3>
            <div id="disk-usage" class="text-2xl mb-2">0</div>
            <br />
            <div id="disk-details" class="text-sm text-gray-600 hidden"></div>
        </div>
    </div>
</div>

<script>
    const advancedMode = document.getElementById('advanced-mode');
    const detailElements = document.querySelectorAll('[id$="-details"]');

    function formatBytes(value, unit = 'B') {
        const KiB = 1024;
        const MiB = KiB * 1024;
        const GiB = MiB * 1024;
        const TiB = GiB * 1024;
        const PiB = TiB * 1024;
        
        // Convert input to bytes
        let bytes = value;
        switch (unit.toUpperCase()) {
            case 'KIB': bytes = value * KiB; break;
            case 'MIB': bytes = value * MiB; break;
            case 'GIB': bytes = value * GiB; break;
            case 'TIB': bytes = value * TiB; break;
            case 'PIB': bytes = value * PiB; break;
        }
        
        // Determine appropriate unit
        if (bytes >= PiB) return (bytes / PiB).toFixed(2) + ' PB';
        if (bytes >= TiB) return (bytes / TiB).toFixed(2) + ' TB';
        if (bytes >= GiB) return (bytes / GiB).toFixed(2) + ' GB';
        if (bytes >= MiB) return (bytes / MiB).toFixed(2) + ' MB';
        return (bytes / KiB).toFixed(2) + ' KB';
    }

    function updateMetrics() {
        fetch(`/proxy/metrics/${serverId}`)
            .then(response => response.json())
            .then(data => {
                // CPU
                const cpuPercent = (data.cpu.usage / data.cpu.request * 100).toFixed(1);
                document.getElementById('cpu-percent').textContent = cpuPercent + '%';
                document.getElementById('cpu-details').innerHTML = `
                    Usage: ${data.cpu.usage}<br>
                    Request: ${data.cpu.request}<br>
                    Limit: ${data.cpu.limit}
                `;

                // Memory
                const memoryPercent = ((data.memory.usage / data.memory.request) * 100).toFixed(1);
                document.getElementById('memory-percent').textContent = memoryPercent + '%';
                document.getElementById('memory-number').textContent = '(' + formatBytes(data.memory.usage, 'MiB') + ")";
                document.getElementById('memory-details').innerHTML = `
                    Usage: ${data.memory.usage} MB<br>
                    Request: ${data.memory.request} MB<br>
                    Limit: ${data.memory.limit} MB
                `;

                // Disk
                document.getElementById('disk-usage').textContent = formatBytes(data.disk.usage, 'KiB');
                document.getElementById('disk-details').innerHTML = `
                    Usage: ${data.disk.usage} KB<br>
                    ${data.disk.limit ? `Limit: ${data.disk.limit} KB` : 'No limit set'}
                `;
            })
            .catch(error => console.error('Error fetching metrics:', error));
    }

    advancedMode.addEventListener('change', () => {
        detailElements.forEach(el => {
            el.classList.toggle('hidden');
        });
    });

    updateMetrics();
    setInterval(updateMetrics, 1000);
</script>