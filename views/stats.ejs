<div class="max-w-4xl mx-auto">
    <div class="flex justify-between mb-4">
        <h1 class="text-2xl font-bold">Server Metrics</h1>
        <label class="flex items-center">
            <input type="checkbox" id="advanced-mode" class="mr-2">
            Advanced Mode
        </label>
    </div>

    <div class="grid grid-cols-3 gap-4">
        <div class="rounded-lg shadow p-6 text-center">
            <h3 class="text-xl font-bold mb-2">CPU Usage</h3>
            <div id="cpu-percent" class="text-2xl mb-2">0%</div>
            <br />
            <div id="cpu-details" class="text-sm text-gray-600 hidden"></div>
        </div>
        <div class="rounded-lg shadow p-6 text-center">
            <h3 class="text-xl font-bold mb-2">Memory Usage</h3>
            <div id="memory-percent" class="text-2xl mb-2">0%</div>
            <div id="memory-number" class="text-2xl text-gray-500"></div>
            <br />
            <div id="memory-details" class="text-sm text-gray-600 hidden"></div>
        </div>
        <div class="rounded-lg shadow p-6 text-center">
            <h3 class="text-xl font-bold mb-2">Disk Usage</h3>
            <div id="disk-usage" class="text-2xl mb-2">0</div>
            <br />
            <div id="disk-details" class="text-sm text-gray-600 hidden"></div>
        </div>
    </div>
</div>

<script>

const advancedMode = document.getElementById('advanced-mode');
const detailElements = document.querySelectorAll('[id$="-details"]');

function updateMetrics() {
    fetch(`/proxy/metrics/${serverId}`)
        .then(response => response.json())
        .then(data => {
            // CPU
            const cpuPercent = (data.cpu.usage / data.cpu.request * 100).toFixed(1);
            document.getElementById('cpu-percent').textContent = cpuPercent + '%';
            document.getElementById('cpu-details').innerHTML = `
                Usage: ${data.cpu.usage}<br>
                Request: ${data.cpu.request}<br>
                Limit: ${data.cpu.limit}
            `;
            // Memory
            const memoryPercent = ((data.memory.usage / data.memory.request) * 100).toFixed(1);
            document.getElementById('memory-percent').textContent = memoryPercent + '%';
            document.getElementById('memory-number').textContent = '(' + formatBytes(data.memory.usage, 'MiB') + ")";
            document.getElementById('memory-details').innerHTML = `
                Usage: ${data.memory.usage} MB<br>
                Request: ${data.memory.request} MB<br>
                Limit: ${data.memory.limit} MB
            `;
            // Disk
            document.getElementById('disk-usage').textContent = formatBytes(data.disk.usage, 'KiB');
            document.getElementById('disk-details').innerHTML = `
                Usage: ${data.disk.usage} KB<br>
                ${data.disk.limit ? `Limit: ${data.disk.limit} KB` : 'No limit set'}
            `;
        })
        .catch(error => console.error('Error fetching metrics:', error));
}

advancedMode.addEventListener('change', () => {
    detailElements.forEach(el => {
        el.classList.toggle('hidden');
    });
});

// Start the loop here
updateMetrics();
setInterval(updateMetrics, 1000);

// Pause interval when the panel is hidden, unpause when visible
document.addEventListener("visibilitychange", () => {
    if (document.visibilityState === "hidden") {
        clearInterval(metricsInterval);
    } else if (document.visibilityState === "visible") {
        metricsInterval = setInterval(updateMetrics, 1000);
    }
});

// Stop the interval when the user goes away
window.onbeforeunload = () => {
    clearInterval(metricsInterval);
    return null;
};

</script>