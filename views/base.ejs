<!DOCTYPE html>
<html class="h-full bg-cover bg-fixed" style="background-image: url('https://api.oddbyte.dev/img/BrightMoon.jpg');">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Server Dashboard</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.5/axios.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://oddbyte.dev/js/cursor.js"></script>
    <link rel="stylesheet" href="https://oddbyte.dev/styles/cursor.css">
</head>
<body class="h-full flex flex-col text-white">
    <div class="container mx-auto px-4 py-8 max-w-[90%]">
        <!-- Navigation Card -->
        <div class="rounded-xl overflow-hidden bg-[rgba(17,25,40,0.75)] border border-[rgba(255,255,255,0.125)] p-2 mb-8">
            <div class="flex space-x-8 justify-center">
                <a href="/server/<%= serverId %>/console" class="<%= page === 'console' ? 'text-blue-400 border-blue-400' : 'text-gray-300 border-transparent hover:text-white hover:border-gray-400' %> py-4 px-6 border-b-2 font-medium transition-colors duration-200">
                    Console
                </a>
                <a href="/server/<%= serverId %>/settings" class="<%= page === 'settings' ? 'text-blue-400 border-blue-400' : 'text-gray-300 border-transparent hover:text-white hover:border-gray-400' %> py-4 px-6 border-b-2 font-medium transition-colors duration-200">
                    Settings
                </a>
                <a href="/server/<%= serverId %>/stats" class="<%= page === 'stats' ? 'text-blue-400 border-blue-400' : 'text-gray-300 border-transparent hover:text-white hover:border-gray-400' %> py-4 px-6 border-b-2 font-medium transition-colors duration-200">
                    Stats
                </a>
                <a href="/server/<%= serverId %>/files" class="<%= page === 'file' ? 'text-blue-400 border-blue-400' : 'text-gray-300 border-transparent hover:text-white hover:border-gray-400' %> py-4 px-6 border-b-2 font-medium transition-colors duration-200">
                    Files
                </a>
            </div>
        </div>

        <!-- Server Info Card -->
        <div class="rounded-xl overflow-hidden bg-[rgba(17,25,40,0.75)] border border-[rgba(255,255,255,0.125)] p-6 mb-8">
            <h1 class="text-3xl font-bold mb-6" id="server-name"></h1>
            
            <div class="space-y-4">
                <div id="server-info" class="space-y-4">
                    <div class="flex items-center space-x-2">
                        <span class="text-gray-300">Status:</span>
                        <span class="px-3 py-1 rounded-full text-sm font-medium status"></span>
                    </div>
                    <div class="grid grid-cols-3 gap-4">
                        <div class="bg-gray-800 bg-opacity-50 p-4 rounded-lg">
                            <div class="text-gray-400 text-sm">Players</div>
                            <div class="text-xl font-semibold players"></div>
                        </div>
                        <div class="bg-gray-800 bg-opacity-50 p-4 rounded-lg">
                            <div class="text-gray-400 text-sm">RAM</div>
                            <div class="text-xl font-semibold ram"></div>
                        </div>
                        <div class="bg-gray-800 bg-opacity-50 p-4 rounded-lg">
                            <div class="text-gray-400 text-sm">Version</div>
                            <div class="text-xl font-semibold version"></div>
                        </div>
                    </div>
                </div>

                <!-- Control Buttons -->
                <div class="bg-gray-800 bg-opacity-50 rounded-lg p-6">
                    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                        <button onclick="startServer()" class="bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg transition-all duration-200 transform hover:scale-105 w-full">Start</button>
                        <button onclick="stopServer()" class="bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-all duration-200 transform hover:scale-105 w-full">Stop</button>
                        <button onclick="restartServer()" class="bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-all duration-200 transform hover:scale-105 w-full">Restart</button>
                        <button onclick="hibernateServer()" class="bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-all duration-200 transform hover:scale-105 w-full">Hibernate</button>
                        <button onclick="bootServer()" class="bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg transition-all duration-200 transform hover:scale-105 w-full">Un-Hibernate</button>
                        <button onclick="updateServer()" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition-all duration-200 transform hover:scale-105 w-full">Update Server</button>
                        <button onclick="upgradeServer()" class="bg-emerald-600 hover:bg-emerald-700 text-white font-bold py-3 px-6 rounded-lg transition-all duration-200 transform hover:scale-105 w-full">Max Upgrades</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Alert system -->
        <div id="alert-container" class="fixed inset-0 flex items-center justify-center hidden z-50">
            <div class="fixed inset-0 bg-blue-500 bg-opacity-15 backdrop-blur-sm"> <!-- Alert background --> </div>

            <!-- The alert box -->
            <div class="bg-white rounded-xl p-8 max-w-md mx-4 relative z-10 transform transition-all duration-200 ease-out scale-95 opacity-0" id="alert-box">
                <div class="flex items-start mb-6">
                    <div id="alert-icon" class="mr-4 flex-shrink-0"> <!-- Icon --> </div>

                    <div class="flex-1">
                        <h3 id="alert-title" class="text-lg font-semibold mb-2"> <!-- Title --></h3>
                        <p id="alert-content" class="text-gray-600"> <!-- Content --> </p>
                    </div>
                </div>

                <!-- Button to close alerts -->
                <div class="flex justify-end">
                    <button onclick="closeAlert()" class="px-6 py-2.5 rounded-lg font-medium transition-all duration-200 hover:scale-105" id="alert-button">
                        OK
                    </button>
                </div>
            </div>
        </div>

        <script>
// Variables
let serverData = {};
const serverId = window.location.pathname.split('/')[2];
let updateInterval;

// Helper functions
function formatBytes(value, unit = 'B') {
    const KiB = 1024;
    const MiB = KiB * 1024;
    const GiB = MiB * 1024;
    const TiB = GiB * 1024;
    const PiB = TiB * 1024;
    
    let bytes = value;
    switch (unit.toUpperCase()) {
        case 'KIB': bytes = value * KiB; break;
        case 'MIB': bytes = value * MiB; break;
        case 'GIB': bytes = value * GiB; break;
        case 'TIB': bytes = value * TiB; break;
        case 'PIB': bytes = value * PiB; break;
    }
    
    if (bytes >= PiB) return (bytes / PiB).toFixed(2) + ' PB';
    if (bytes >= TiB) return (bytes / TiB).toFixed(2) + ' TB';
    if (bytes >= GiB) return (bytes / GiB).toFixed(2) + ' GB';
    if (bytes >= MiB) return (bytes / MiB).toFixed(2) + ' MB';
    return (bytes / KiB).toFixed(2) + ' KB';
}

function getCookie(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
}

// Alert system
const ALERT_TYPES = {
  info: {
    icon: `<svg class="w-6 h-6 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>`,
    title: 'Information',
    buttonClass: 'bg-blue-500 text-white hover:bg-blue-600'
  },
  warning: {
    icon: `<svg class="w-6 h-6 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path></svg>`,
    title: 'Warning',
    buttonClass: 'bg-yellow-500 text-white hover:bg-yellow-600'
  },
  error: {
    icon: `<svg class="w-6 h-6 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>`,
    title: 'Error',
    buttonClass: 'bg-red-500 text-white hover:bg-red-600'
  }
};

function showAlert(message, type = 'info') {
  const alertType = ALERT_TYPES[type] || ALERT_TYPES.info;
  const container = document.getElementById('alert-container');
  const box = document.getElementById('alert-box');
  const icon = document.getElementById('alert-icon');
  const title = document.getElementById('alert-title');
  const content = document.getElementById('alert-content');
  const button = document.getElementById('alert-button');
  icon.innerHTML = alertType.icon;
  title.textContent = alertType.title;
  content.textContent = message;
  button.className = `px-6 py-2.5 rounded-lg font-medium transition-all duration-200 hover:scale-105 ${alertType.buttonClass}`;
  container.classList.remove('hidden');
  requestAnimationFrame(() => {
    box.classList.remove('scale-95', 'opacity-0');
    box.classList.add('scale-100', 'opacity-100');
  });
}

function closeAlert() {
  const container = document.getElementById('alert-container');
  const box = document.getElementById('alert-box');
  
  box.classList.remove('scale-100', 'opacity-100');
  box.classList.add('scale-95', 'opacity-0');
  
  setTimeout(() => {
    container.classList.add('hidden');
  }, 200);
}

// Info card
function updateDOM() {
    const server = serverData;
    if (!server) return;
    
    document.getElementById('server-name').textContent = `Server: ${server.name}`;
    
    let statusText = '';
    let statusClass = '';
    
    if (server.suspended) {
        statusText = 'Suspended';
        statusClass = 'bg-red-500';
    } else {
        switch (server.status) {
            case 'SERVICE_OFFLINE':
                statusText = 'Hibernating';
                statusClass = 'bg-gray-500';
                break;
            case 'OFFLINE':
                statusText = 'Offline';
                statusClass = 'bg-red-500';
                break;
            case 'STARTING':
                statusText = 'Starting';
                statusClass = 'bg-yellow-500';
                break;
            case 'ONLINE':
                statusText = 'Online';
                statusClass = 'bg-green-500';
                break;
            default:
                statusText = server.status;
                statusClass = 'bg-gray-500';
        }
    }
    
    document.querySelector('.status').textContent = statusText;
    document.querySelector('.status').className = `px-3 py-1 rounded-full text-sm font-medium status ${statusClass}`;
    document.querySelector('.players').textContent = `${server.player_count}/${server.max_players}`;
    document.querySelector('.ram').textContent = `${(server.max_ram / 1024).toFixed(1)} GB`;
    document.querySelector('.version').textContent = server.server_version?.version || 'Unknown';
}

async function updateServerInfo() {
    try {
        const response = await axios.get('/getData');
        const server = response.data.find(s => s._id === serverId);
        if (!server) throw new Error('Server not found');
        
        serverData = { ...server };
        updateDOM();
    } catch (error) {
        console.error('Failed to fetch server data:', error);
    }
}

// Server management functions
async function startServer() {
    try {
        await axios.post(`/proxy/server/${serverId}/start`);
        await updateServerInfo();
    } catch (error) {
        alert('Failed to start server');
    }
}

async function bootServer() {
    try {
        await axios.post(`/proxy/server/${serverId}/start_service`);
        await updateServerInfo();
    } catch (error) {
        alert('Failed to boot server');
    }
}

async function stopServer() {
    try {
        await axios.post(`/proxy/server/${serverId}/shutdown`);
        await updateServerInfo();
    } catch (error) {
        alert('Failed to stop server');
    }
}

async function restartServer() {
    try {
        await axios.post(`/proxy/server/${serverId}/restart`);
        await updateServerInfo();
    } catch (error) {
        alert('Failed to restart server');
    }
}

async function hibernateServer() {
    try {
        await axios.post(`/proxy/server/${serverId}/destroy_service`);
        await updateServerInfo();
    } catch (error) {
        alert('Failed to hibernate server');
    }
}

async function updateServer() {
    try {
        await fetch(`/proxy/v1/server/${serverId}/version/install`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                type: "PAPER",
                version_id: "66ba7dc16b14b54cfc0e4edc"
            }),
            credentials: 'include'
        });
        resetProps();
    } catch (error) {
        alert('Failed to update server');
        console.error('Error:', error);
    }
}

async function upgradeServer() {
    try {
        const payload = {
            ram: "gb32",
            max_players: "default",
            online_status: "always_online",
            disk_space: "default",
            cpu: "pro",
            backups: "standard",
            cost: 0,
        };
        
        await axios.post(`/proxy/v1/server/${serverId}/custom_plan`, payload);
        await updateServerInfo();
    } catch (error) {
        alert('Failed to upgrade server');
        console.error(error);
    }
}

async function resetProps() {
    try {
        await fetch(`/proxy/file/${serverId}/delete`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: '{"files":["/server.properties"]}',
            credentials: 'include'
        });
        
        await fetch(`/proxy/server/${serverId}/edit_server_properties`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: '{"serverProperties":{"max-players":10,"view-distance":6,"gamemode":"survival","difficulty":"easy","spawn-mobs":true,"spawn-animals":true,"force-gamemode":false,"level-type":"default","spawn-npcs":true,"allow-nether":true,"pvp":true,"allow-flight":false,"spawn-protection":16,"announce-player-achievements":true,"enable-command-block":false,"require-resource-pack":false,"hardcore":false,"level-name":"world","max-tick-time":60000,"resource-pack-prompt":"","op-permission-level":4,"entity-broadcast-range-percentage":100,"white-list":false,"snooper-enabled":true,"enforce-whitelist":false,"max-world-size":29999984}}',
            credentials: 'include'
        });
        
        await restartServer();
        alert('Successfully reset server.properties!');
    } catch (error) {
        alert('Failed to reset properties');
        console.error(error);
    }
}

// Start updating server info
updateServerInfo();
updateInterval_Serverinfo = setInterval(updateServerInfo, 3000);

window.onbeforeunload = () => {
    clearInterval(updateInterval_Serverinfo);
};

// Export functions for global access
window.startServer = startServer;
window.bootServer = bootServer;
window.stopServer = stopServer;
window.restartServer = restartServer;
window.hibernateServer = hibernateServer;
window.updateServer = updateServer;
window.upgradeServer = upgradeServer;
window.resetProps = resetProps;
window.formatBytes = formatBytes;
window.getCookie = getCookie;

// Replace alert with our alert system
window.alert = showAlert;
window.errorAlert = (message) => showAlert(message, 'error');
window.warningAlert = (message) => showAlert(message, 'warning');

// Export variables for global access
window.serverData = serverData;
window.serverId = serverId;

        </script>

        <div id="dynamic_content" class="rounded-xl overflow-hidden bg-[rgba(17,25,40,0.75)] border border-[rgba(255,255,255,0.125)] p-6 mb-8"><%- include(page) %></div>
    </div>
    <div hidden class="cursor"></div>
    <div hidden class="cursor-inner"></div>
</body>
</html>